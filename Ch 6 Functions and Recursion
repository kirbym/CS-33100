// Ch 6 Functions and Recursion.cpp

#include "GradeBook.h"
#include "Maximum.h"
#include <iostream>
#include <iomanip>
#include <cstdlib> //contains prototypes for functions such as srand() and rand()
#include <ctime> //contains prototypes for function time()
using namespace std;


/************************************************************************************************************
//Recursive fibonacci function

unsigned long fibonacci(unsigned long); //function prototype

int main()
{
	for (int i = 0; i <= 25; i++) //show all fibonacci numbers up to the 25th
	{
		cout << "Fibonacci(" << i << ") = " << fibonacci(i) << endl;
	}
}

unsigned long fibonacci(unsigned long number) //function to determine fibonacci series numbers
{
	if (0 == number || 1 == number) //base cases
		return number;
	else //recursion step
		return fibonacci(number - 1) + fibonacci(number - 2); //repeatedly call fibonacci to add up all previous numbers
}
************************************************************************************************************/


/************************************************************************************************************
//Recursive factoral function

unsigned long factorial(unsigned long); //function prototype

int main()
{
	for (int i = 0; i <= 20; ++i)
	{
		cout << i << "! = " << factorial(i) << endl;
	}
	return 0;
}

unsigned long factorial(unsigned long number) //function to calculate the factorial of a number
{
	if (number <= 1) //base cases: 0! = 1 and 1! = 1
		return 1;
	else   //recursion step
		return number * factorial(number - 1); //repeatedly call factorial function until number = 1
}
************************************************************************************************************/


/************************************************************************************************************
//Demonstrating the use of template functions allowing different data types to be sent to the same function
int main()
{
	int int1, int2, int3;
	double double1, double2, double3;
	char char1, char2, char3;

	cout << "Input 3 integers: ";
	cin >> int1 >> int2 >> int3;
	int intMax = maximum(int1, int2, int3);
	cout << "\nThe maximum of the 3 integers is " << intMax;

	cout << "\n\nInput 3 doubles: ";
	cin >> double1 >> double2 >> double3;
	double doubleMax = maximum(double1, double2, double3);
	cout << "\nThe maximum of the 3 doubles is " << doubleMax;

	cout << "\n\nInput 3 characters: ";
	cin >> char1 >> char2 >> char3;
	char charMax = maximum(char1, char2, char3);
	cout << "\nThe maximum of the 3 characters is " << charMax;

	cout << "\n\nThe minimum of the 3 maximums is ";
	minimum(intMax, doubleMax, charMax);
	cout << endl;

	return 0;
}
************************************************************************************************************/

/***********************************************************************************************************
//This is a simulation of the game of Craps

unsigned int rollDice(); //function prototype

int main()
{
	srand(static_cast<unsigned int>(time(0))); //seeding the random number generator with computer time

	enum Status { CONTINUE, WON, LOST }; //enumerated data type containing the status of the game

	unsigned int myPoint;  //the player's point if game proceeds past first dice roll
	Status gameStatus = CONTINUE;  //initial status of the game
	unsigned int sumOfDice = rollDice();  //sum of the dice roll

	switch (sumOfDice)
	{
	case 7:
	case 11:  //if player rolls 7 or 11 on first roll, player instantly wins
		gameStatus = WON;
		break;
	case 2:
	case 3:   //if player rolls 2, 3, or 12 on first roll, player instantly loses
	case 12:
		gameStatus = LOST;
		break;
	default:   //otherwise game continues
		gameStatus = CONTINUE;
		myPoint = sumOfDice;  //first dice roll becomes player's roll
		cout << "Point is " << myPoint << endl;
	}

	while (gameStatus == CONTINUE) //continue the game
	{
		sumOfDice = rollDice();

		if (sumOfDice == myPoint) //if player rolls dice and the sum is equal to the player's point, then player has won
			gameStatus = WON;
		else if (sumOfDice == 7)  //if player instead rolls a 7 before reaching the player's point, then player has lost
			gameStatus = LOST;
	}

	if (gameStatus == WON)  //display win or loss message
		cout << "Player wins!" << endl;
	else
		cout << "Player loses." << endl;

	return 0;
}

unsigned int rollDice()  //function to roll two dice and sum the resulting numbers
{
	const int MAX = 6;  //upper bound for the die
	const int MIN = 1;  //lower bound for the die
	unsigned int die1 = (rand() % (MAX - MIN + 1)) + MIN;  //"roll" the die
	unsigned int die2 = (rand() % (MAX - MIN + 1)) + MIN; //"roll" the die
	unsigned int sum = die1 + die2;   //sum of the two faces

	//display what the player has rolled
	cout << "Player rolled " << die1 << " + " << die2 << " = " << sum << endl;

	return sum;
}
********************************************************************************************************/

/*******************************************************************************************************
//This is a reminder of how pass by reference works

void pass_by_reference(double &, double &, double &);

int main()
{
	double a, b, c;

	cout << "Give three values: ";
	cin >> a >> b >> c;

	for (unsigned i = 0; i < 10; i++)
	{
		pass_by_reference(a, b, c);
		cout << "a = " << a << "  b = " << b << "  c = " << c << endl;
	}

	return 0;
}

void pass_by_reference(double &x, double &y, double &z)
{
	x += x;
	y -= 8;
	z *= 3;
}
********************************************************************************************************/
