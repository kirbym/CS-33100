// Ch 7 Arrays and Vectors.cpp

#include <iostream>
#include <iomanip>
#include <vector>
#include <stdexcept>
#include "GradeBook.h"
using namespace std;

/******************************************************************************************************
int main()
{
	const array< int, GradeBook::students > grades = { 87, 68, 94, 100, 83, 78, 85, 91, 76, 87 };
	string courseName = "CS 33100 Intro to C++ and Oop";

	GradeBook myGradeBook(courseName, grades);
	myGradeBook.displayMessage();
	myGradeBook.processGrades();

	return 0;
}

******************************************************************************************************/

/******************************************************************************************************
void outputVector(const vector<int> &);
void inputVector(vector<int> &);

int main()
{
	vector<int> integers1(7); // 7-element vector
	vector<int> integers2(10); // 10-element vector

	//print size and contents of vector 1
	cout << "Size of vector integers1 is " << integers1.size()
		<< "\nvector after intialization:" << endl;
	outputVector(integers1);

	//print size and contents of vector 2
	cout << "Size of vector integers2 is " << integers2.size()
		<< "\nvector after intialization:" << endl;
	outputVector(integers2);

	//input and display integers1 and integers2
	cout << "\nEnter 17 integers:" << endl;
	inputVector(integers1);
	inputVector(integers2);

	cout << "\nAfter input, the vectors contain:\n"
		<< "integers1:" << endl;
	outputVector(integers1);
	cout << "integers2:" << endl;
	outputVector(integers2);

	if (integers1 != integers2)
		cout << "integers1 and integers2 are not equal" << endl;

	//create vector integers3 using integers1 as an initializer; print size and contents
	vector<int> integers3(integers1);

	cout << "Size of vector integers3 is " << integers3.size()
		<< "\nvector after intialization:" << endl;
	outputVector(integers3);

	//use overloaded assignment operator
	cout << "\nAssigning integers2 to integers1:" << endl;
	integers1 = integers2;

	cout << "integers1:" << endl;
	outputVector(integers1);
	cout << "integers2:" << endl;
	outputVector(integers2);

	//use equality operator with vector objects
	cout << "\nEvaluating: integers1 == integers2" << endl;

	if (integers1 == integers2)
		cout << "integers1 and integers2 are equal" << endl;

	//square brackets to use value at a location
	cout << "\nintegers1[5] is " << integers1[5];

	//square brackets to assign values
	cout << "\n\nAssigning 1000 to integers[5]" << endl;
	integers1[5] = 1000;
	cout << "integers1:" << endl;
	outputVector(integers1);

	//attempt out-of-range subscript
	try
	{
		cout << "\nAttempt to display integers1.at(15)" << endl;
		cout << integers1.at(15) << endl; //ERROR: out of range
	}
	catch (out_of_range &ex)
	{
		cerr << "An exception occurred: " << ex.what() << endl;
	}

	//changing size of a vector
	cout << "\nCurrent integers3 size is: " << integers3.size() << endl;
	integers3.push_back(1000); //append 1000 to the vector
	cout << "New integers3 size is: " << integers3.size() << endl;
	cout << "integers3 now contains: ";
	outputVector(integers3);
}

void outputVector(const vector<int> &items)
{
	for (int item : items)
		cout << item << " ";

	cout << endl;
}

void inputVector(vector<int> &items)
{
	for (int &item : items)
		cin >> item;
}

******************************************************************************************************/
